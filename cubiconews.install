<?php
/**
 * @file
 * Cubiconews module install file
 *
 * Created by George Sokianos (walkero@gmail.com)
 *	drush dis cubiconews -y && drush pm-uninstall cubiconews -y
 *	drush en cubiconews -y
 */

 
 /**
 * Implements hook_install().
 */
function cubiconews_install() {
	
	$cubiconews_type = array(
      'type' => 'cubiconews_item', 
      'name' => st('Cubiconews Newsletter'), 
      'base' => 'node_content', 
      'description' => st("Create a new Newsletter, based on Cubiconews module."), 
      'custom' => TRUE, 
      'modified' => TRUE, 
      'locked' => FALSE,
    );

	$type = node_type_set_defaults($cubiconews_type);
	node_type_save($type);
	//node_add_body_field($type, st('Under header'));
	
	// Default node to not be promoted and have comments disabled.
	variable_set('node_options_cubiconews_item', array('status'));
	variable_set('comment_cubiconews_item', 'COMMENT_NODE_HIDDEN');
	
	// Don't display date and author information for cubiconews nodes by default.
	variable_set('node_submitted_cubiconews_item', FALSE);
	
	
	$fieldlist =_cubiconews_installed_fields();
	foreach ($fieldlist as $field) {
		field_create_field($field);
	}
	
	$instancelist = _cubiconews_installed_instances();
	foreach ($instancelist as $instance) {
		//$instance['entity_type'] = 'node';
		//$instance['bundle'] = $form_testing['type'];
		field_create_instance($instance);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// OBSOLETE
	/*
	$field = array(
		'field_name' => 'field_image_filename', 
		'type' => 'text', 
		'cardinality' => 1, 
		'locked' => TRUE, 
		'settings' => array(
		), 
	  );
	  field_create_field($field);
	  
	$instance = array(
		'field_name' => 'field_image_filename', 
		'entity_type' => 'node', 
		'label' => 'Outfit image filename', 
		'bundle' => 'outfits', 
		'description' => st('Store the filename of the outfit image.'), 
		'required' => false, 
		'settings' => array(),
		'widget' => array(
		  'type' => 'text', 
		  'active' => 0,
		  'settings' => array(),
		  'weight' => 11,
		),
	);
	field_create_instance($instance);	
	  
	
	$field = array(
		'field_name' => 'field_image_filedata', 
		'type' => 'text_long', 
		'cardinality' => 1, 
		'locked' => TRUE, 
		'settings' => array(), 
	);
	field_create_field($field);
	  
	$instance = array(
		'field_name' => 'field_image_filedata', 
		'entity_type' => 'node', 
		'label' => 'Outfit image filedata', 
		'bundle' => 'outfits', 
		'description' => st('Store the data of the outfit image.'), 
		'required' => false, 
		'settings' => array(),
		'widget' => array(
		  'type' => 'text_textarea', 
		  'active' => 0,
		  'settings' => array(),
		  'weight' => 11,
		),
	);
	field_create_instance($instance);
	*/
	
	/*
	variable_set('mail_system',
	  array_merge(
	    variable_get('mail_system', array('default-system' => 'DefaultMailSystem')),  // Previously set mail_system variable
	    array( 'cubiconews' => 'CubicoNewsMailSystem')   // My new key(s) which ADD to the previous keys
	  )
	);
	*/
}

function cubiconews_uninstall() {
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => 'cubiconews_item'));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}
	
	// Delete all the nodes at once
	node_delete_multiple($nids);
	
	
	// delete all fields
	$fieldskeys = array_keys(_cubiconews_installed_fields());
	foreach ($fieldskeys as $field) {
		field_delete_field($field);
	}
	
	// find all fields and delete instance
	$instances = field_info_instances('node', 'cubiconews_item');
	foreach ($instances as $instance_name => $instance) {
		field_delete_instance($instance);
	}
		
	
	
	
	// Delete our content type	
	node_type_delete('cubiconews_item');  
	
	// Delete all the variables the module uses
	variable_del('block_cubiconews_email_string');
	variable_del('cubiconews_config_selected_contenttypes');
	variable_del('cubiconews_config_test_emails');
	$contenttypes = node_type_get_types();
	foreach($contenttypes AS $nodetype_key => $nodetype_data) {
		if($nodetype_key != 'cubiconews_item') {
			if(variable_get('cubiconews_config_image_field_' . $nodetype_key)) {
				variable_del('cubiconews_config_image_field_' . $nodetype_key);
			}
		}
	}
	
	// Unset module keys in variable mail_system
	//$mail_system = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
	//unset($mail_system['cubiconews']);
	//variable_set('mail_system', $mail_system);
}


/**
 * Implementation of hook_schema().
 */
function cubiconews_schema() {
  $schema = array();
  
  // Emails table
  $schema['cubiconews_emails'] = array(
    'fields' => array(
      'eid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),  
      'email' => array(
        'type' => 'varchar',
        'length' => 64, 
        'not null' => FALSE, 
        'default' => NULL
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => '0-disabled, 1-enabled',
      ),
      'timestamp' => array(
        'description' => 'The timestamp the email was last registered',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'disabletime' => array(
        'description' => 'The timestamp the email was last disabled',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'email' => array('email')
    ),
  );
  
  // Groups table
  $schema['cubiconews_groups'] = array(
    'fields' => array(
      'gid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),  
      'name' => array(
        'type' => 'varchar',
        'length' => 64, 
        'not null' => FALSE, 
        'default' => NULL
      )
    ),
    'primary key' => array('gid'),
    //'indexes' => array(
    //  'gid' => array('gid')
    //),
  );
  
  // Groups - emails link table table
  $schema['cubiconews_groupemails'] = array(
    'fields' => array(
      'gid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
      ),
      'eid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
      ),  
    )
  );
  
  // Newsletter table
  $schema['cubiconews_newsletters'] = array(
    'fields' => array(
      'newsid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),  
      'nid' => array(
        'description' => 'The node id of the newsletter',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),  
      'title' => array(
        'type' => 'varchar',
        'length' => 255, 
        'not null' => FALSE, 
        'default' => NULL
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => '-1=cancelled, 0=unsent/new, 1=ready to send, 9=sent',
      ),
      'created' => array(
        'description' => 'The timestamp the newsletter was first created',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The timestamp the newsletter was last updated',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'sent' => array(
        'description' => 'The timestamp the newsletter sent',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'primary key' => array('newsid'),
    //'indexes' => array(
    //  'newsid' => array('newsid')
    //),
  );
  
  // Newsletter table -- OBS
  /*
  $schema['cubiconews_nodes'] = array(
    'fields' => array(
      'cnid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),  
      'newsid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),  
      'cubnid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),  
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),  
      'weight' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of the article in newsletter',
      ),
    ),
    'primary key' => array('cnid'),
    //'indexes' => array(
    //  'cnid' => array('cnid')
    //),
  );
  */
  
  return $schema;
}

/**
 * Use requirements to ensure that the sequencer output directory can be created
 */
function cubiconews_requirements($phase) {
  $requirements = array();
  if ($phase == 'install') {
    $requirements['cubiconews_output'] = array(
      'title' => t('CubicoNews output path'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Exists'),
    );

    $path = 'public://cubiconews';
    if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
      $requirements['cubiconews_output']['description'] = t('The CubicoNews images directory, %path could not be created due to a misconfigured files directory. Please ensure that the files directory is correctly configured and that the webserver has permission to create directories.', array('%path' => file_uri_target($path)));
      $requirements['cubiconews_output']['severity'] = REQUIREMENT_ERROR;
      $requirements['cubiconews_output']['value'] = t('Unable to create');
    }
    
  }

  return $requirements;
}




function _cubiconews_installed_fields() {
	$fields = array(
		'field_cubiconews_article_group' => array(
			'field_name' => 'field_cubiconews_article_group',
			'type' => 'field_collection',
			'module' => 'field_collection',
			'cardinality' => '-1', 
			'active' => TRUE,
			'locked' => FALSE, 
			'settings' => array(), 
		),
		'field_cubiconews_article_title' => array(
			'field_name' => 'field_cubiconews_article_title', 
			'type' => 'text', 
			'cardinality' => TRUE, 
			'locked' => TRUE, 
			'settings' => array(
				'max_length' => '255'
			), 
		),
		'field_cubiconews_article_body' => array(
			'field_name' => 'field_cubiconews_article_body', 
			'type' => 'text_long', 
			'cardinality' => TRUE, 
			'locked' => TRUE, 
			'indexes' => array(
				'format' => array(
					0 => 'format',
				),
			),
			'settings' => array(),
		),
		'field_cubiconews_article_image' => array(
			'field_name' => 'field_cubiconews_article_image', 
			'type' => 'image', 
			'module' => 'image',
			'indexes' => array(
				'fid' => array(
					0 => 'fid',
				),
			),
			'cardinality' => TRUE, 
			'locked' => FALSE,
			'settings' => array(
				'default_image' => 0,
				'uri_scheme' => 'public',
			),
		),		
		'field_cubiconews_article_link' => array(
		  'active' => 1,
		  'cardinality' => 1,
		  'deleted' => 0,
		  'entity_types' => array(),
		  'field_name' => 'field_cubiconews_article_link',
		  'indexes' => array(),
		  'locked' => 0,
		  'module' => 'link',
		  'settings' => array(
			'attributes' => array(
			  'class' => '',
			  'rel' => '',
			  'target' => 'default',
			),
			'display' => array(
			  'url_cutoff' => 80,
			),
			'enable_tokens' => 1,
			'title' => 'optional',
			'title_maxlength' => 128,
			'title_value' => '',
			'url' => 0,
		  ),
		  'translatable' => 0,
		  'type' => 'link_field',
		)
	);	
	
    //dpm($fields);
    return $fields;
}

function _cubiconews_installed_instances() {
	$instances = array(
		'field_cubiconews_article_group' => array(
			'field_name' => 'field_cubiconews_article_group', 
			'entity_type' => 'node', 
			'label' => st('Articles Group'), 
			'bundle' => 'cubiconews_item', 
			'description' => st('Newsletter articles'), 
			'required' => FALSE, 
			'settings' => array(
				'user_register_form' => FALSE,
			),
			'widget' => array(
				'weight' => '-3',
				'type' => 'field_collection_embed',
				'module' => 'field_collection',
				'active' => 0,
				'settings' => array(),
			),
			'display' => array(
				'default' => array(
					'label' => 'above',
					'type' => 'field_collection_view',
					'settings' => array(
						'edit' => 'Edit',
						'delete' => 'Delete',
						'add' => 'Add',
						'description' => TRUE,
						'view_mode' => 'full',
					),
					'module' => 'field_collection',
					'weight' => 1,
				),
				'teaser' => array(
					'type' => 'hidden',
					'label' => 'above',
					'settings' => array(),
					'weight' => 0,
				),
			),
		),
		'field_cubiconews_article_title' => array(
			'field_name' => 'field_cubiconews_article_title', 
			'entity_type' => 'field_collection_item', 
			'label' => st('Article title'), 
			'bundle' => 'field_cubiconews_article_group', 
			'description' => st('Insert here the article title.'), 
			'required' => true, 
			'settings' => array(),
			'widget' => array(
				'type' => 'text_textfield',
				'module' => 'text',
				'active' => 1,
				'settings' => array(),
				'weight' => 1,
			),
		),
		'field_cubiconews_article_body' => array(
			'field_name' => 'field_cubiconews_article_body', 
			'entity_type' => 'field_collection_item', 
			'label' => st('Article body'), 
			'bundle' => 'field_cubiconews_article_group', 
			'description' => st('Insert here the article body.'), 
			'required' => true, 
			'settings' => array(
				'text_processing' => 1,
				'user_register_form' => FALSE,
			),
			'display' => array(
			  'default' => array(
				'label' => 'above',
				'module' => 'text',
				'settings' => array(),
				'type' => 'text_default',
				'weight' => 2,
			  ),
			  'teaser' => array(
				'label' => 'above',
				'settings' => array(),
				'type' => 'hidden',
				'weight' => 0,
			  ),
			),
			'widget' => array(
				'type' => 'text_textarea',
				'module' => 'text',
				'active' => 1,
				'settings' => array(
				  'rows' => 5,
				),
				'weight' => 2,
			),
		),
		'field_cubiconews_article_image' => array(
			'field_name' => 'field_cubiconews_article_image', 
			'entity_type' => 'field_collection_item', 
			'label' => st('Article Image'), 
			'bundle' => 'field_cubiconews_article_group', 
			'description' => st('Store the main image of the article.'), 
			'required' => true, 
			'display' => array(
			  'default' => array(
				'label' => 'above',
				'module' => 'image',
				'settings' => array(
				  'image_link' => '',
				  'image_style' => '',
				),
				'type' => 'image',
				'weight' => 2,
			  ),
			),
			'settings' => array(
			  'alt_field' => 0,
			  'default_image' => 0,
			  'file_directory' => '',
			  'file_extensions' => 'png gif jpg jpeg',
			  'max_filesize' => '',
			  'max_resolution' => '',
			  'min_resolution' => '',
			  'title_field' => 0,
			  'user_register_form' => FALSE,
			),
			'widget' => array(
			  'active' => 1,
			  'module' => 'image',
			  'settings' => array(
				'preview_image_style' => 'thumbnail',
				'progress_indicator' => 'throbber',
			  ),
			  'type' => 'image_image',
			  'weight' => 3,
			),
		),
		'field_cubiconews_article_link' => array(
			'bundle' => 'field_cubiconews_article_group',
			'default_value' => NULL,
			'deleted' => 0,
			'description' => '',
			'display' => array(
			  'default' => array(
				'label' => 'above',
				'module' => 'link',
				'settings' => array(),
				'type' => 'link_default',
				'weight' => 3,
			  ),
			),
			'entity_type' => 'field_collection_item',
			'field_name' => 'field_cubiconews_article_link',
			'label' => 'Article Link',
			'required' => 1,
			'settings' => array(
			  'absolute_url' => 1,
			  'attributes' => array(
				'class' => '',
				'configurable_class' => 0,
				'configurable_title' => 0,
				'rel' => '',
				'target' => 'default',
				'title' => '',
			  ),
			  'display' => array(
				'url_cutoff' => 80,
			  ),
			  'enable_tokens' => 1,
			  'rel_remove' => 'default',
			  'title' => 'value',
			  'title_label_use_field_label' => 0,
			  'title_maxlength' => 255,
			  'title_value' => 'Read more',
			  'url' => 0,
			  'user_register_form' => FALSE,
			  'validate_url' => 0,
			),
			'widget' => array(
			  'active' => 0,
			  'module' => 'link',
			  'settings' => array(),
			  'type' => 'link_field',
			  'weight' => 4,
			),
		)		
		
		
	);	

    //dpm($instances);
    return $instances;
}